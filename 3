def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        if arg2 < arg1:
            var9 = var6 - var6
        else:
            var9 = arg2 + (arg7 + 1555529066 - arg8 & arg7)
        var10 = arg8 + var6 + (arg7 + var6 & arg1)
        var11 = ((-952 & (((var6 | (arg7 + (arg2 ^ arg1 ^ 594) & var6 & ((((-449 & arg2) & arg8) | arg7) ^ arg8 ^ arg1) | var10 ^ arg2 - 161) - var6 + var6) & arg8) + -513)) - arg2) + 845
        result = var6 & var10
        return result
    var12 = func4(var6, arg1)
    var25 = func5(var6, var12)
    var30 = func6(arg2, arg1)
    var31 = func9()
    var32 = var12 & var12 + var31 & var12
    var33 = arg1 | 218
    var34 = (arg2 & var33 & 840450535) & var6
    var35 = var30 & (var25 - 756659715) + var33
    var36 = -321 - var34
    if var30 < var34:
        var37 = (arg2 + var32 - -972) | var6
    else:
        var37 = (arg1 & var35) ^ var12 & var31
    var38 = var32 - var6
    var39 = arg1 & var34
    if var35 < var36:
        var40 = (arg1 | arg2) | (var33 - arg2)
    else:
        var40 = var38 + 951854430 + (var12 - var33)
    if var36 < var6:
        var41 = var36 ^ var38 & var34
    else:
        var41 = ((var30 + var39) - var31) & var39
    if arg1 < var33:
        var42 = var12 ^ var36 | -220 - var36
    else:
        var42 = var36 & 916 ^ var34 | var35
    if var30 < var32:
        var43 = (var35 ^ arg2) - var30
    else:
        var43 = var38 ^ var31 + arg2
    var44 = var33 & var35
    result = var25 | (var31 ^ (var32 ^ var12 ^ (122 - var25)) + var25 & var6 | -319) ^ var39
    return result
def func9():
    func7()
    result = len(range(2))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : 7
def func6(arg26, arg27):
    var28 = 0
    for var29 in range(7):
        var28 += (-5 | arg27) + var28
    return var28
def func5(arg13, arg14):
    var15 = (1248629203 + -610 + 98) + -1229865226
    var16 = 1225411710 & arg13
    var17 = 919 + (664049716 | arg13) - 875
    var18 = (var17 + var16) ^ -355115282
    var19 = arg13 + 835
    if var18 < arg14:
        var20 = (var18 & var19) | (-339 ^ var19)
    else:
        var20 = arg14 - var17
    var21 = var17 ^ 263184145 - var18 - var16
    var22 = var17 - (680 - var19) | -820
    var23 = var15 + var18 + var16 + arg14
    var24 = var21 & 885
    result = arg13 - var21 & var16 + arg13
    return result
def func2(arg3, arg4):
    closure = [0]
    def func3(acc, rest):
        var5 = acc + 5 ^ (closure[0] - acc) ^ -6 + -6 & rest
        closure[0] += var5
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
